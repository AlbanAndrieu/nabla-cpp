#imports
import sys
import os
import ProjectMacro
#getting local scons environment
Import('env')
localenv = env.Clone()

print("Main librairies")

Arch = ProjectMacro.getArch()
#print("Arch :", Arch)

#exporting headers
localenv.Install(os.path.join(localenv['PROJECT_INCLUDE_DIR'],''), Glob('include/*.h')+Glob('include/*.ipp'))

#if not env['use_asan']:
#    localenv.MergeFlags([
#        '-Wl,--no-undefined',
#    ])

localenv.MergeFlags([
#    '-Wl,--as-needed',
##    '-Wl,--no-as-needed',
    '-Wl,-rpath=target/lib/'+ Arch +'/debug64/shared/',
])

if localenv['color']:
    from termcolor import colored, cprint

    if 'CPPDEFINES' in localenv:
        print(colored('CPPDEFINES :', 'magenta'), colored(localenv['CPPDEFINES'], 'cyan'))
    print(colored('CCFLAGS :', 'magenta'), colored(localenv['CCFLAGS'], 'cyan'))
    print(colored('CXXFLAGS :', 'magenta'), colored(localenv['CXXFLAGS'], 'cyan'))
    print(colored('LINKFLAGS :', 'magenta'), colored(localenv['LINKFLAGS'], 'cyan'))
    # print "dump whole env :", localenv.Dump()
    print(colored('CXXVERSION :', 'magenta'), colored(localenv['CXXVERSION'], 'cyan'))

print('use_mingw', localenv['use_mingw'])

if Arch not in ['mingw', 'cygwin', 'winnt'] and env['use_conan']:
    build_path_relative_to_sconstruct = Dir('../../../../').path
    build_directory = os.path.join(build_path_relative_to_sconstruct, 'build-scons')
    print("build_directory :", build_directory)
    conan = SConscript('#{}/SConscript_conan'.format(build_directory))
    if not conan:
        print ('File `SConscript_conan` is missing.')
        print ('It should be generated by running `conan install sample/microsoft/ --build missing`.')
        sys.exit(1)

    flags = conan["conan"]
    # print("Conan flags :", flags)
    localenv.MergeFlags(flags)

if localenv['use_mingw']:
    localenv.Append(LIBPATH = ['/mingw64/lib'])
    localenv.Append(LIBS = [
        'boost_thread-mt',
        'boost_date_time-mt',
        'boost_system-mt',
    ])
else:
    #explicit links
    localenv.Append(LIBS = [
        'boost_thread',
        'boost_date_time',
        'boost_system',
    ])

print('LIBS :', localenv['LIBS'])

if env['color']:
    print(colored('CC :', 'magenta'), colored(env['CC'], 'cyan'))
    print(colored('CXX :', 'magenta'), colored(env['CXX'], 'cyan'))
else:
    print('CC :' + env['CC'])
    print('CXX :' + env['CXX'])

if env['use_static']:
    p = localenv.Library(os.path.join(localenv['LIBRARY_OUTPUT_PATH'],'main_library'), Glob('*.cpp'))
else:
    #building shared library
    p = localenv.SharedLibrary(os.path.join(localenv['LIBRARY_OUTPUT_PATH'],'main_library'), Glob('*.cpp'))

Default(p)
