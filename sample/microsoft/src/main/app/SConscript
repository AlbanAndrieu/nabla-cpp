#imports
import os
import sys
import platform
import ProjectMacro
#getting local scons environment
Import('env')
localenv = env.Clone()

print("Main application")

Arch = ProjectMacro.getArch()
#print("Arch :", Arch)

#https://o440.wordpress.com/2011/02/25/scons-and-code-coverage/
localenv.Append(CCFLAGS = ['-fprofile-arcs', '-ftest-coverage'])
#localenv.Append(CXXFLAGS = ['-fprofile-arcs', '-ftest-coverage'])
localenv.Append(LINKFLAGS = ['-lgcov', '--coverage'])

#localenv.Append(LIBS = ['gcov'])

localenv.Append(LINKFLAGS = "-Wl,--no-as-needed")

# Warning mingw do not have asan
#if env['use_clang'] and env['use_asan']:
#   #env['CCFLAGS'] += ['-fsanitize=address']
#   #env['LINKFLAGS'] += ['-fsanitize=address', '-lasan']
#   localenv.Append(LINKFLAGS = "-fsanitize=address")

#adding OS specific libs
#localenv['LIBS'].extend(localenv['OSDependentLibs'])
localenv.Append(LIBS=['main_library'], LIBPATH=['#main_library'])

localenv.MergeFlags([
    '-Wl,-rpath=' + localenv['LIBRARY_OUTPUT_PATH'],
])

if Arch not in ['mingw','cygwin','winnt'] and env['use_conan']:
    build_path_relative_to_sconstruct = Dir('../../../../').path
    #build_directory = os.path.join(localenv['sandbox'], 'sample', 'build-scons')
    build_directory = os.path.join(build_path_relative_to_sconstruct, 'build-scons')
    print("build_directory :", build_directory)
    conan = SConscript('#{}/SConscript_conan'.format(build_directory))
    if not conan:
        print ('File `SConscript_conan` is missing.')
        print ('It should be generated by running `conan install sample/microsoft/ --build missing`.')
        sys.exit(1)

    flags = conan["conan"]
    localenv.MergeFlags(flags)


if env['use_static']:
    #localenv['CCFLAGS'] += ['-static-libgcc', '-static-libstdc++']
    localenv['LINKFLAGS'] += ['-static']
    #localenv['LINKFLAGS'] += ['-Xlinker -Map=a.map']
else:
    print("platform : "  + sys.platform)

    if sys.platform == 'win32':
        localenv.Install( localenv['PROJECT_BINARY_DIR'],
            [
                "/tools/mingw32/i686-w64-mingw32/lib/libgcc_s_sjlj-1.dll",   #  if not static-libgcc
                "/tools/mingw32/i686-w64-mingw32/lib/libstdc++-6.dll",    #  if not static-libgcc
            ])
    #else:

    print("platform : "  + platform.platform())

    if platform.platform().startswith('Linux'):
        localenv.Install( localenv['PROJECT_BINARY_DIR'],
            [
                #"/usr/lib/gcc/i686-w64-mingw32/9.3-win32/libgcc_s_sjlj-1.dll",   #  if not static-libgcc
                "/usr/lib/gcc/x86_64-w64-mingw32/9.3-posix/libgcc_s_seh-1.dll",   #  if not static-libgcc
                #"/usr/lib/gcc/i686-w64-mingw32/9.3-win32/libstdc++-6.dll",    #  if not static-libgcc
                "/usr/lib/gcc/x86_64-w64-mingw32/9.3-posix/libstdc++-6.dll",    #  if not static-libgcc
            ])

    localenv.Alias('install', localenv['PROJECT_BINARY_DIR'])

source = Glob('*.cpp')

#building Binary
p = localenv.Program(os.path.join(localenv['PROJECT_BINARY_DIR'],'run_app'), source)

localenv.Install('/usr/bin', p)
#localenv.Alias('install', '/usr/bin')

Default(p)
