#imports
import os
import ProjectMacro
#getting local scons environment
Import('env')
localenv = env.Clone()

Arch = ProjectMacro.getArch()
print("Arch :", Arch)

#explicit links
localenv["LIBS"] = [
    'boost_thread',
    'boost_date_time',
    'boost_system',
]

# Compile in 32 bits
#localenv.Prepend(CCFLAGS = ['-m32'])
#localenv.Prepend(LINKFLAGS = ['-m32'])

#https://o440.wordpress.com/2011/02/25/scons-and-code-coverage/
localenv.Append(CCFLAGS = ['-fprofile-arcs', '-ftest-coverage'])
#localenv.Append(CXXFLAGS = ['-fprofile-arcs', '-ftest-coverage'])
localenv.Append(LINKFLAGS = ['-lgcov', '--coverage'])

#localenv.Append(LIBS = ['gcov'])

localenv.Append(LINKFLAGS = "-Wl,--no-as-needed")
if Arch not in ['winnt']:
#localenv.Append(LINKFLAGS = "-fsanitize=address -lasan")
    localenv.Append(LINKFLAGS = "-fsanitize=address")

#adding OS specific libs
#localenv['LIBS'].extend(localenv['OSDependentLibs'])
localenv.Append(LIBS=['main_library'], LIBPATH=['#main_library'])

localenv.MergeFlags([
    '-Wl,-rpath=' + localenv['LIBRARY_OUTPUT_PATH'],
])

build_path_relative_to_sconstruct = Dir('../../../../').path
#build_directory = os.path.join(localenv['sandbox'], 'sample', 'build-scons')
build_directory = os.path.join(build_path_relative_to_sconstruct, 'build-scons')
print("build_directory :", build_directory)
conan = SConscript('#{}/SConscript_conan'.format(build_directory))
if not conan:
    print ('File `SConscript_conan` is missing.')
    print ('It should be generated by running `conan install sample/microsoft/ --build missing`.')
    sys.exit(1)

flags = conan["conan"]
localenv.MergeFlags(flags)

#building Binary
p = localenv.Program(os.path.join(localenv['PROJECT_BINARY_DIR'],'run_app'), Glob('*.cpp'))

Default(p)
