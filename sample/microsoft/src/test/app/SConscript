#imports
import os
import ProjectMacro
#getting local scons environment
Import('env')
localenv = env.Clone()

print("Test application")

Arch = ProjectMacro.getArch()
#print("Arch :", Arch)

#shared_lib = SConscript('../cpp/SConscript')
#localenv.Append( LIBS=[shared_lib] )

localenv.Append(LINKFLAGS = "-Wl,--no-as-needed")

# Warning mingw do not have asan
#if env['use_clang'] and env['use_asan']:
#   #env['CCFLAGS'] += ['-fsanitize=address']
#   #env['LINKFLAGS'] += ['-fsanitize=address', '-lasan']
#   localenv.Append(LINKFLAGS = "-fsanitize=address")

#localenv["CXXFLAGS"] = [
#    "-std=c++11",
#    "-Wall",
#    "-O3",
#]

#localenv.Append( '-Wl,--no-as-needed -lcppunit' )

if Arch not in ['mingw','cygwin'] and env['use_conan']:
    build_path_relative_to_sconstruct = Dir('../../../../').path
    #build_directory = os.path.join(localenv['sandbox'], 'sample', 'build-scons')
    build_directory = os.path.join(build_path_relative_to_sconstruct, 'build-scons')
    print("build_directory :", build_directory)
    conan = SConscript('#{}/SConscript_conan'.format(build_directory))
    if not conan:
        print ('File `SConscript_conan` is missing.')
        print ('It should be generated by running `conan install sample/microsoft/ --build missing`.')
        sys.exit(1)

    flags = conan["conan"]
    localenv.MergeFlags(flags)

#adding OS specific libs
#localenv['LIBS'].extend(localenv['OSDependentLibs'])
localenv.Append(LIBS=['test_library'], LIBPATH=['#test_library'])

localenv.MergeFlags([
    '-Wl,-rpath=' + localenv['LIBRARY_OUTPUT_PATH'],
])

if Arch not in ['x86Linux'] and localenv['use_mingw']:
    localenv.Append(LIBPATH = ['/mingw64/lib'])
    localenv.Append(LIBS = [
        'boost_thread-mt',
        'boost_date_time-mt',
        'boost_system-mt',
    ])
else:
    #explicit links
    localenv.Append(LIBS = [
        'boost_thread',
        'boost_date_time',
        'boost_system',
    ])

#https://bugs.launchpad.net/ubuntu/+source/cppunit/+bug/985841
#localenv.Append(LINKFLAGS = "-lcppunit")
localenv.Append(LIBS = "cppunit")

#if Arch not in ['winnt']:
#building Binary
p = localenv.Program(os.path.join(localenv['PROJECT_BINARY_DIR'],'run_tests'), Glob('*.cpp'))

Default(p)
