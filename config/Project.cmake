#
# File generated by CMakeBuilder
#
#

SET(CMAKE_BUILD_TYPE "Debug")

#TODO Clang https://cmake.org/cmake/help/latest/manual/cmake-toolchains.7.html

SET(CMAKE_CXX_STANDARD 11)
SET(CMAKE_CXX_STANDARD_REQUIRED TRUE)

SET(CTEST_MEMORYCHECK_COMMAND "/usr/bin/valgrind")
#SET( CTEST_MEMORYCHECK_COMMAND_OPTIONS "--tool=callgrind -v" )
#SET( CTEST_MEMORYCHECK_COMMAND_OPTIONS, "--trace-children=yes --leak-check=full" )
#SET(MEMORYCHECK_COMMAND_OPTIONS "--xml=yes --xml-file=test.xml")

# Coverage build doesn't work with MSVC
#OPTION(BUILD_COVERAGE "Build cpp_dependencies for coverage" OFF)

# Add coverage options for CI
#IF(COVERAGE)
#   SET_TARGET_PROPERTIES(main_library run_app run_tests PROPERTIES
#                         COMPILE_FLAGS "-fprofile-arcs -ftest-coverage"
#                         LINK_FLAGS "-lgcov --coverage")
#ENDIF(COVERAGE)

#if (WIN32)
#  SET(DEFAULT_BOOST OFF) # WITH_BOOST will make boost not mandatory
#else()
#  SET(DEFAULT_BOOST ON)
#endif()

# Running with Boost filesystem is typically faster, until platform specific std::filesystem comes out that is faster yet.
# Note that Boost::filesystem needs to be installed for this to be used.
OPTION(WITH_BOOST "Use Boost filesystem" ${DEFAULT_BOOST})

if (WIN32)
  SET(DEFAULT_MMAP OFF)
else()
  SET(DEFAULT_MMAP ON)
endif()

# Switch between using the mmap logic for reading files (faster, because one copy less) or a file read (slower, because a full copy, but portable).
OPTION(WITH_MMAP "Use mmapped files" ${DEFAULT_MMAP})

if (WIN32 OR APPLE)
  SET(DEFAULT_MEMRCHR OFF)
else()
  SET(DEFAULT_MEMRCHR ON)
endif()

# Whether your platform provides a fast memrchr function. If it does not, turn this off and a slower replacement will be used.
OPTION(HAS_MEMRCHR "Platform has memrchr function" ${DEFAULT_MEMRCHR})

if(WITH_MMAP)
  LIST(APPEND COMPILE_FLAGS -DWITH_MMAP)
endif()

if(NOT HAS_MEMRCHR)
  LIST(APPEND COMPILE_FLAGS -DNO_MEMRCHR)
endif()

OPTION(BUILD_SHARED_LIBS "Build shared libraries." ON)

SET(CMAKE_COLOR_MAKEFILE ON)
SET(CMAKE_VERBOSE_MAKEFILE ON)

SET(EXECUTABLE_OUTPUT_PATH bin/${CMAKE_BUILD_TYPE})

# AIX                           AIX
# BSD/OS                        BSD/OS
# FreeBSD                       FreeBSD
# HP-UX                         HP-UX
# IRIX                          IRIX
# Linux                         Linux
# NetBSD                        NetBSD
# OpenBSD                       OpenBSD
# OFS/1 (Digital Unix)          OSF1
# SCO OpenServer 5              SCO_SV
# SCO UnixWare 7                UnixWare
# SCO UnixWare (pre release 7)  UNIX_SV
# SCO XENIX                     Xenix
# Solaris                       SunOS
# SunOS                         SunOS
# Tru64                         Tru64
# Ultrix                        ULTRIX
# cygwin                        CYGWIN_NT-5.1
# MacOSX                        Darwin

MESSAGE("OS is : ${CMAKE_SYSTEM}-${CMAKE_SYSTEM_VERSION} CMAKE_UNAME : ${CMAKE_UNAME} CMAKE_HOST_UNIX : ${CMAKE_HOST_UNIX} CMAKE_HOST_SYSTEM_NAME : ${CMAKE_HOST_SYSTEM_NAME} CMAKE_HOST_SYSTEM_PROCESSOR : ${CMAKE_HOST_SYSTEM_PROCESSOR} ")

#default /usr/local
#SET(CMAKE_INSTALL_PREFIX  /usr/local)

SET(PROJECT_BUILD_TYPE ${CMAKE_BUILD_TYPE})

IF(DEFINED ENV{PROJECT_SRC})
  MESSAGE("PROJECT_SRC is defined to : $ENV{PROJECT_SRC}")
  SET(DEV_SOURCE_DIR $ENV{PROJECT_SRC})
ELSE()
  MESSAGE("PROJECT_SRC is NOT defined")
  #SET(DEV_SOURCE_DIR ${CMAKE_SOURCE_DIR}/../..)
  SET(DEV_SOURCE_DIR ${CMAKE_SOURCE_DIR})
  #SET(PROJECT_SRC ${CMAKE_SOURCE_DIR}/../..)
  SET(PROJECT_SRC ${CMAKE_SOURCE_DIR})
  MESSAGE(STATUS "DEV_SOURCE_DIR setted to environement values")
ENDIF()

MESSAGE("DEV_SOURCE_DIR is ${DEV_SOURCE_DIR}")

IF(DEFINED ENV{PROJECT_TARGET_PATH})
  MESSAGE("PROJECT_TARGET_PATH is defined to : $ENV{PROJECT_TARGET_PATH}")
  #SET(DEV_BINARY_DIR "$ENV{PROJECT_TARGET_PATH}")
  SET(DEV_BINARY_DIR "${CMAKE_BINARY_DIR}")
ELSE()
  MESSAGE("PROJECT_TARGET_PATH is NOT defined")
  SET(DEV_BINARY_DIR "${CMAKE_BINARY_DIR}/target")
  MESSAGE(STATUS "PROJECT_TARGET_PATH setted to environement values")
ENDIF()
MESSAGE("DEV_BINARY_DIR is ${DEV_BINARY_DIR}")

SET(PROJECT_SOURCE_DIR "${DEV_SOURCE_DIR}")
MESSAGE("PROJECT_SOURCE_DIR is ${PROJECT_SOURCE_DIR}")
SET(PROJECT_BINARY_DIR "${DEV_BINARY_DIR}")
MESSAGE("PROJECT_BINARY_DIR is ${PROJECT_BINARY_DIR}")
SET(PROJECT_CONFIG_DIR "${DEV_SOURCE_DIR}/config/")
MESSAGE("PROJECT_CONFIG_DIR is ${PROJECT_CONFIG_DIR}")

IF(DEFINED ENV{PROJECT_THIRDPARTY_PATH})
  MESSAGE("PROJECT_THIRDPARTY_PATH is defined to : $ENV{PROJECT_THIRDPARTY_PATH}")
  SET(PROJECT_THIRDPARTY_PATH "$ENV{PROJECT_THIRDPARTY_PATH}")
ELSE()
  MESSAGE("PROJECT_THIRDPARTY_PATH is NOT defined")
  SET(PROJECT_THIRDPARTY_PATH "thirdparty")
  MESSAGE(STATUS "PROJECT_THIRDPARTY_PATH setted to environement values")
ENDIF()
MESSAGE("PROJECT_THIRDPARTY_PATH is ${PROJECT_THIRDPARTY_PATH}")
SET(PROJECT_THIRDPARTY_PATH_LOCAL "${PROJECT_THIRDPARTY_PATH}")

SET(DATABASE_ROOT "${PROJECT_THIRDPARTY_PATH_LOCAL}/database")

MESSAGE("CMAKE_SYSTEM is ${CMAKE_SYSTEM}")

if("${CMAKE_CXX_COMPILER_ID}" MATCHES GNU)
  INCLUDE(CheckCXXCompilerFlag)

  #SET(COMPILE_FLAGS -Wall -Wextra)
  #
  #check_cxx_compiler_flag("-Wpedantic" PEDANTIC_SUPPORTED)
  #if(PEDANTIC_SUPPORTED)
  #  LIST(APPEND COMPILE_FLAGS -Wpedantic)
  #endif()
elseif("${CMAKE_CXX_COMPILER_ID}" STREQUAL "MSVC")
  SET(COMPILE_FLAGS /W4)
  # boost gets compiled as static libs on Windows
  SET(Boost_USE_STATIC_LIBS ON)
endif()

IF(UNIX)

  MESSAGE(STATUS "UNIX found")

  IF(CMAKE_HOST_SYSTEM_NAME MATCHES "Linux")
    MESSAGE(STATUS "Linux found")
    SET(ARCH linux)
    SET(MACHINE x86Linux)

    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra -std=c++11 -pthread")
    #check_cxx_compiler_flag("-Wpedantic" PEDANTIC_SUPPORTED)
    #if(PEDANTIC_SUPPORTED)
    #  #LIST(APPEND CMAKE_CXX_FLAGS -Wpedantic)
    #  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wpedantic" )
    #endif()
    MESSAGE(STATUS, "CXXFLAGS: ${CMAKE_CXX_FLAGS}")

    #See https://blog.flameeyes.eu/2008/11/relationship-between-as-needed-and-no-undefined-part-1-what-do-they-do/
    #SET(CMAKE_SHARED_LINKER_FLAGS "-Wl,-Bsymbolic-functions -Wl,-z,relro -Wl,--as-needed")
    #SET(CMAKE_SHARED_LINKER_FLAGS "-Wl,--no-undefined")
    #SET(CMAKE_SHARED_LINKER_FLAGS "-Wl,--no-as-needed")
    #SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -Wl,-Bsymbolic-functions -Wl,-z,relro")
    SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -Wl,-Bsymbolic-functions")
    SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -Wl,--no-as-needed")

    #-fstack-protector-strong -Wformat -Werror=format-security -D_FORTIFY_SOURCE=2
    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -D_FORTIFY_SOURCE=2")

    ADD_DEFINITIONS(-Dlinux -DP100)

  ELSE(CMAKE_HOST_SYSTEM_NAME MATCHES "Linux")
    MESSAGE(STATUS "Linux not found")
  ENDIF(CMAKE_HOST_SYSTEM_NAME MATCHES "Linux")

  IF(CMAKE_HOST_SYSTEM_NAME MATCHES "SunOS")
    MESSAGE(STATUS "SunOS found")
    SET(ARCH solaris)
    SET(MACHINE sun4sol)

    ADD_DEFINITIONS(-Dsolaris -DSYSV -DSVR4 -DP100 -DDEBUG -DANSI_C -D_POSIX_THREADS -mt -xildoff -DOWTOOLKIT_WARNING_DISABLED)

  ELSE(CMAKE_HOST_SYSTEM_NAME MATCHES "SunOS")
    MESSAGE(STATUS "SunOS not found")
  ENDIF(CMAKE_HOST_SYSTEM_NAME MATCHES "SunOS")

  IF("${CMAKE_SYSTEM}" MATCHES "SunOS-5.10")
    MESSAGE(STATUS "SunOS-5.10 found")
    SET(ARCH solaris)
    SET(MACHINE x86sol)

  ELSE("${CMAKE_SYSTEM}" MATCHES "SunOS-5.10")
    MESSAGE(STATUS "SunOS-5.10 not found")
  ENDIF("${CMAKE_SYSTEM}" MATCHES "SunOS-5.10")

  IF(CMAKE_HOST_SYSTEM_NAME MATCHES "CYGWIN")
    MESSAGE(STATUS "CYGWIN found")
    SET(ARCH cygwin)
    SET(MACHINE x86Linux)

    SET(CYGWIN_HOME "$ENV{CYGWIN_HOME}")
    SET(CMAKE_LEGACY_CYGWIN_WIN32 0)

    SET(GCC_VERSION 3.4.4)

    #For Eclipse to avoid : Unresolved inclusion add this to the include path
    #INCLUDE_DIRECTORIES("${CYGWIN_HOME}/lib/gcc/i686-pc-cygwin/${GCC_VERSION}/include/c++")
    #LINK_DIRECTORIES("${CYGWIN_HOME}/lib/gcc/i686-pc-cygwin/${GCC_VERSION}/debug")


    #SET(CMAKE_SHARED_LINKER_FLAGS "-Wl,--no-undefined")

    ADD_DEFINITIONS(-Dcygwin -Dlinux -DP100)
    ADD_DEFINITIONS(-DDEBUG -DNOMINMAX)
    ADD_DEFINITIONS(-DEXCEPTION_EXPORTS)

  ELSE(CMAKE_HOST_SYSTEM_NAME MATCHES "CYGWIN")
    MESSAGE(STATUS "CYGWIN not found")
  ENDIF(CMAKE_HOST_SYSTEM_NAME MATCHES "CYGWIN")

ELSE(UNIX)
  MESSAGE(STATUS "UNIX not found")
ENDIF(UNIX)

IF(MINGW)
  MESSAGE(STATUS "MINGW found")
  IF(CMAKE_HOST_SYSTEM_NAME MATCHES "Linux")
    MESSAGE(STATUS "X compiling from ${CMAKE_HOST_SYSTEM_NAME} found")
    SET(ARCH winnt)
    SET(MACHINE win32)
  ELSE(CMAKE_HOST_SYSTEM_NAME MATCHES "Linux")
    MESSAGE(STATUS "X compiling from Unix found")
    SET(ARCH linux)
    SET(MACHINE x86Linux)
  ENDIF(CMAKE_HOST_SYSTEM_NAME MATCHES "Linux")

  #SET(BUILD_SHARED_LIBS OFF)
  #SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -static -static-libgcc -static-libstdc++ -lstdc++ -lgcc")

  #-lregex -lpng -ljpeg -lzlib -ltiff -lstdc++ -lgcc -lodbc32 -lwsock32 -lwinspool -lwinmm -lshell32 -lcomctl32 -lctl3d32 -lodbc32 -ladvapi32 -lodbc32 -lwsock32 -lopengl32 -lglu32 -lole32 -loleaut32 -luuid
  MESSAGE(STATUS, "CXXFLAGS: ${CMAKE_CXX_FLAGS}")

  #INCLUDE_DIRECTORIES("C:\\cygwin\\usr\\include")
  #LINK_DIRECTORIES("C:\\cygwin\\lib")

  ADD_DEFINITIONS(-Dlinux -DACE_HAS_EXCEPTIONS -D_TEMPLATES_ENABLE_ -D_REENTRANT)
  ADD_DEFINITIONS(-DuseTao -DEffix_Infra_HAS_BOOL)

ELSE(MINGW)
  MESSAGE(STATUS "MINGW not found")
ENDIF(MINGW)

SET(PROJECT_INCLUDE_DIR ${PROJECT_BINARY_DIR}/include)
SET(PROJECT_INSTALL_DIR ${PROJECT_BINARY_DIR})
SET(LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR})
SET(EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR}/bin)

#SET(PROJECT_INCLUDE_DIR ${PROJECT_BINARY_DIR}/install/${MACHINE}/${PROJECT_BUILD_TYPE}/include)
#SET(PROJECT_INSTALL_DIR ${PROJECT_BINARY_DIR}/install/${MACHINE}/${PROJECT_BUILD_TYPE})
#SET(LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR}/lib/${MACHINE}/${PROJECT_BUILD_TYPE})
#SET(EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR}/bin/${MACHINE}/${PROJECT_BUILD_TYPE})

SET(CORBA_PC_DIR ${PROJECT_BINARY_DIR}/project/corba/${MACHINE}/${PROJECT_BUILD_TYPE})

MESSAGE(STATUS "MACHINE is ${MACHINE}")

MAKE_DIRECTORY(${PROJECT_INCLUDE_DIR})
MAKE_DIRECTORY(${CORBA_PC_DIR})

OPTION(BUILD_SHARED_LIBS "Build PROJECT shared libraries." OFF)

#IF(WIN32)
#  ADD_DEFINITIONS("-DWIN32")
#ENDIF(WIN32)

MESSAGE(STATUS "Project source directory is ${PROJECT_SOURCE_DIR}")
MESSAGE(STATUS "Project include directory is ${PROJECT_INCLUDE_DIR}")

CONFIGURE_FILE(${PROJECT_CONFIG_DIR}/config.h.in ${PROJECT_INCLUDE_DIR}/config.h)
MESSAGE(STATUS "configured ${PROJECT_CONFIG_DIR}/config.h.in --> ${PROJECT_INCLUDE_DIR}/config.h")

SET(MOVE_FILE_COMMAND mv)
SET(COPY_FILE_COMMAND cp)

INCLUDE(${PROJECT_CONFIG_DIR}/ProjectVersion.cmake)

INCLUDE(${PROJECT_CONFIG_DIR}/ProjectMacro.cmake)

OPTION(ENABLE_TESTS "Enable building of tests" ON)

IF(CMAKE_CROSSCOMPILING)
    MESSAGE(STATUS "X compiling so skipping unit tests.")
    SET(ENABLE_TESTS OFF)
ELSE(CMAKE_CROSSCOMPILING)
    MESSAGE(STATUS "Enabling unit testing of code")
    SET(ENABLE_TESTS ON)
ENDIF(CMAKE_CROSSCOMPILING)

IF(ENABLE_TESTS)
  INCLUDE(${PROJECT_CONFIG_DIR}/FindCppUnit.cmake)
ENDIF(ENABLE_TESTS )


IF(CMAKE_COMPILER_IS_GNUCXX)
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fmessage-length=0 -g -O0 -W -Wshadow -Wunused-variable -Wunused-parameter -Wunused-function -Wunused -Wno-system-headers -Wno-deprecated -Woverloaded-virtual -Wwrite-strings --coverage")
ENDIF(CMAKE_COMPILER_IS_GNUCXX)

MESSAGE(STATUS "PROJECT_NAME ${PROJECT_NAME} = ${CMAKE_PROJECT_NAME}")

#Inclusion
# See ${PROJ_SOURCE_DIR}/config for special inclusion
INCLUDE(FindCxxTest)
INCLUDE(FindBoost)
INCLUDE(FindGettext)
#INCLUDE(FindLibXml2) # See below FIND_PACKAGE(LibXml2)
#INCLUDE(FindX11)
#INCLUDE(FindQt3)
INCLUDE(FindZLIB)
INCLUDE(FindDoxygen)

#HOW TO USE
#cmake -DWITH_GUI=ON -DDATA_DIR=/home/me/datadir .

IF (NOT DATA_DIR)
  SET(DATA_DIR "/usr/share/mydatadir")
ENDIF(NOT DATA_DIR)
MESSAGE(STATUS "Data are in directory ${DATA_DIR}")

INCLUDE_DIRECTORIES(${PROJECT_INCLUDE_DIR})
#INCLUDE_DIRECTORIES(${CMAKE_INSTALL_PREFIX})

IF(UNIX)

  MESSAGE(STATUS "UNIX found")

  IF(CMAKE_HOST_SYSTEM_NAME MATCHES "SunOS")
    MESSAGE(STATUS "SunOS found")

    SET(TIBCO_VERSION "8.1.2")
    SET(XERCES_VERSION "3_0_1")

    #Inclusion de CORBA
    SET(CORBA_VERSION "")

    SET(JAVA_AWT_INCLUDE_DIRECTORIES ${PROJECT_THIRDPARTY_PATH}/j2se/${MACHINE}/jdk1.5/include)
    SET(JAVA_INCLUDE_PATH ${PROJECT_THIRDPARTY_PATH}/j2se/${MACHINE}/jdk1.5/include/solaris)
    SET(JAVA_INCLUDE_PATH2 ${PROJECT_THIRDPARTY_PATH}/j2se/${MACHINE}/jdk1.5/include/solaris)
    SET(JAVA_JVM_LIBRARY_DIRECTORIES ${PROJECT_THIRDPARTY_PATH}/j2se/${MACHINE}/jdk1.5/jre/lib/sparc)

    SET(JAVA_AWT_LIBRARY ${JAVA_JVM_LIBRARY_DIRECTORIES}/libjawt.so ${JAVA_JVM_LIBRARY_DIRECTORIES}/xawt/libmawt.so)
    SET(JAVA_JVM_LIBRARY ${JAVA_JVM_LIBRARY_DIRECTORIES}/libjvm.so)

  ELSE(CMAKE_HOST_SYSTEM_NAME MATCHES "SunOS")
    MESSAGE(STATUS "SunOS not found")
  ENDIF(CMAKE_HOST_SYSTEM_NAME MATCHES "SunOS")

  IF("${CMAKE_SYSTEM}" MATCHES "SunOS-5.10")
    MESSAGE(STATUS "SunOS-5.10 found")
    SET(MACHINE x86sol)

  ELSE("${CMAKE_SYSTEM}" MATCHES "SunOS-5.10")
    MESSAGE(STATUS "SunOS-5.10 not found")
  ENDIF("${CMAKE_SYSTEM}" MATCHES "SunOS-5.10")

  IF(CMAKE_HOST_SYSTEM_NAME MATCHES "Linux")
    MESSAGE(STATUS "Linux found")

    LINK_DIRECTORIES(/usr/lib)

    SET(BOOST_OUTPUT_PATH ${PROJECT_BINARY_DIR}/install/${MACHINE}/${PROJECT_BUILD_TYPE}/lib/boost-${BOOST_VERSION})
    LINK_DIRECTORIES(${BOOST_OUTPUT_PATH})

    #z boost_thread-gcc-mt intl ncurses
    #SET(Boost_LIBRARIES boost_thread-mt boost_system)

    SET(ZLIB_LIBRARY_DIRS z)
    SET(Gettext_LIBRARY_DIRS intl ncurses)
    SET(LIBXML_LIBRARY_DIRS xml2)

    #LINK_DIRECTORIES(${Gettext_LIBRARY_DIRS})

    #Inclusion de CORBA
    #INCLUDE_DIRECTORIES(${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers)
    #INCLUDE_DIRECTORIES(${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/TAO)
    #INCLUDE_DIRECTORIES(${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/TAO/orbsvcs)

    LINK_DIRECTORIES(${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/lib)

    INCLUDE_DIRECTORIES(${PROJECT_THIRDPARTY_PATH_LOCAL}/database/sybase/openclient/${SYBASE_SERVER_VERSION}/ESD_${SYBASE_ESD_VERSION}/${MACHINE}/include)

    LINK_DIRECTORIES(${PROJECT_THIRDPARTY_PATH_LOCAL}/database/sybase/openclient/${SYBASE_SERVER_VERSION}/ESD_${SYBASE_ESD_VERSION}/${MACHINE}/lib)
    LINK_DIRECTORIES(${PROJECT_THIRDPARTY_PATH_LOCAL}/database/sybase/openclient/${SYBASE_SERVER_VERSION}/ESD_${SYBASE_ESD_VERSION}/${MACHINE}/lib3p)
    LINK_DIRECTORIES(${PROJECT_THIRDPARTY_PATH_LOCAL}/database/sybase/openclient/${SYBASE_SERVER_VERSION}/ESD_${SYBASE_ESD_VERSION}/${MACHINE}/dll/debug)

    #INCLUDE_DIRECTORIES(${ORACLE_HOME}/app/oracle/product/${ORACLE_VERSION}/server/OCI/include)
    #LINK_DIRECTORIES(${ORACLE_HOME}/app/oracle/product/${ORACLE_VERSION}/server/OCI/lib/MSVC/vc71)

    INCLUDE_DIRECTORIES(${PROJECT_THIRDPARTY_PATH_LOCAL}/artix30/${MACHINE}/artix/3.0/include)
    LINK_DIRECTORIES(${PROJECT_THIRDPARTY_PATH_LOCAL}/artix30/${MACHINE}/bin)

  ELSE(CMAKE_HOST_SYSTEM_NAME MATCHES "Linux")
    MESSAGE(STATUS "Linux not found")
  ENDIF(CMAKE_HOST_SYSTEM_NAME MATCHES "Linux")

  IF(CMAKE_HOST_SYSTEM_NAME MATCHES "CYGWIN")
    MESSAGE(STATUS "CYGWIN found")

    #SET(LIB_PREFIX lib)
    #SET(LIB_STATIC_SUFFIX .a)
    #SET(LIB_DYNAMIC_SUFFIX .dll)

    LINK_DIRECTORIES(/usr/lib)

    SET(BOOST_OUTPUT_PATH ${PROJECT_BINARY_DIR}/install/${MACHINE}/${PROJECT_BUILD_TYPE}/lib/boost-${BOOST_VERSION})
    LINK_DIRECTORIES(${BOOST_OUTPUT_PATH})

    #z boost_thread-gcc-mt intl ncurses
    #SET(Boost_LIBRARIES boost_thread-gcc-mt)
    SET(Boost_LIBRARIES boost_thread-gcc34-mt-1_41)
    SET(ZLIB_LIBRARY_DIRS z)
    SET(Gettext_LIBRARY_DIRS intl ncurses)
    #SET(LIBXML_LIBRARY_DIRS LIBXML2_LIBRARIES)
    SET(LIBXML_LIBRARY_DIRS xml2)

    #LINK_DIRECTORIES(${Gettext_LIBRARY_DIRS})

    #Inclusion de CORBA
    INCLUDE_DIRECTORIES(${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers)
    INCLUDE_DIRECTORIES(${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/TAO)
    INCLUDE_DIRECTORIES(${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/TAO/orbsvcs)

    LINK_DIRECTORIES(${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/lib)

    INCLUDE_DIRECTORIES(${PROJECT_THIRDPARTY_PATH_LOCAL}/database/sybase/openclient/${SYBASE_SERVER_VERSION}/ESD_${SYBASE_ESD_VERSION}/${MACHINE}/include)

    LINK_DIRECTORIES(${PROJECT_THIRDPARTY_PATH_LOCAL}/database/sybase/openclient/${SYBASE_SERVER_VERSION}/ESD_${SYBASE_ESD_VERSION}/${MACHINE}/lib)
    LINK_DIRECTORIES(${PROJECT_THIRDPARTY_PATH_LOCAL}/database/sybase/openclient/${SYBASE_SERVER_VERSION}/ESD_${SYBASE_ESD_VERSION}/${MACHINE}/lib3p)
    LINK_DIRECTORIES(${PROJECT_THIRDPARTY_PATH_LOCAL}/database/sybase/openclient/${SYBASE_SERVER_VERSION}/ESD_${SYBASE_ESD_VERSION}/${MACHINE}/dll/debug)

    INCLUDE_DIRECTORIES(${ORACLE_HOME}/app/oracle/product/${ORACLE_VERSION}/server/OCI/include)
    LINK_DIRECTORIES(${ORACLE_HOME}/app/oracle/product/${ORACLE_VERSION}/server/OCI/lib/MSVC/vc71)

    #${JAVA_JVM_LIBRARY_DIRECTORIES}/xawt/libmawt.so
    #SET(JAVA_AWT_LIBRARY ${JAVA_JVM_LIBRARY_DIRECTORIES}/jawt.dll)
    #SET(JAVA_JVM_LIBRARY ${JAVA_JVM_LIBRARY_DIRECTORIES}/jvm.dll)

    INCLUDE_DIRECTORIES(${PROJECT_THIRDPARTY_PATH_LOCAL}/artix30/${MACHINE}/artix/3.0/include)
    LINK_DIRECTORIES(${PROJECT_THIRDPARTY_PATH_LOCAL}/artix30/${MACHINE}/bin)

  ENDIF(CMAKE_HOST_SYSTEM_NAME MATCHES "CYGWIN")

  IF(CMAKE_HOST_SYSTEM_NAME MATCHES "SunOS")

    LINK_DIRECTORIES(/usr/lib)

    SET(LIB_PREFIX lib)
    SET(LIB_STATIC_SUFFIX .a)
    SET(LIB_DYNAMIC_SUFFIX .so)

    #QT_USE_FILE
    #SET(QT_INCLUDE_DIR ${TOOLS_ROOT}/qt/${QT_VERSION}/${MACHINE}/opt/include)
    #SET(QT_BINARY_DIR ${TOOLS_ROOT}/qt/${QT_VERSION}/${MACHINE}/opt/bin)
    #SET(QT_LIBRARY_DIR ${TOOLS_ROOT}/qt/${QT_VERSION}/${MACHINE}/debug/lib)
    #SET(QT_PLUGINS_DIR ${TOOLS_ROOT}/qt/${QT_VERSION}/${MACHINE}/opt/plugins)
    #SET(QT_TRANSLATIONS_DIR ${TOOLS_ROOT}/qt/${QT_VERSION}/${MACHINE}/opt/translations)
    #SET(QT_DOC_DIR ${TOOLS_ROOT}/qt/${QT_VERSION}/${MACHINE}/opt/doc)
    #SET(QT_MKSPECS_DIR ${TOOLS_ROOT}/qt/${QT_VERSION}/${MACHINE}/opt/mkspecs)

    #INCLUDE(${QT_INCLUDE_DIR})
    #LINK_DIRECTORIES(${QT_LIBRARY_DIR})

    #SET(Qt3_FOUND)

    #Inclusion de CORBA
    INCLUDE_DIRECTORIES(${PROJECT_THIRDPARTY_PATH}/corba/tao/${CORBA_VERSION}${MACHINE}/ACE_wrappers)
    INCLUDE_DIRECTORIES(${PROJECT_THIRDPARTY_PATH}/corba/tao/${CORBA_VERSION}${MACHINE}/ACE_wrappers/TAO)
    INCLUDE_DIRECTORIES(${PROJECT_THIRDPARTY_PATH}/corba/tao/${CORBA_VERSION}${MACHINE}/ACE_wrappers/TAO/orbsvcs)

    LINK_DIRECTORIES(${PROJECT_THIRDPARTY_PATH}/corba/tao/${CORBA_VERSION}${MACHINE}/lib/${MACHINE}.mt/debug/shared)
    LINK_DIRECTORIES(${PROJECT_THIRDPARTY_PATH}/corba/tao/${CORBA_VERSION}${MACHINE}/lib/${MACHINE}.mt/gcc/opt/shared)

    #Inclusion de BOOST
    SET(Boost_INCLUDE_DIRS ${PROJECT_THIRDPARTY_PATH}/boost/${BOOST_VERSION}/include)
    MESSAGE(STATUS "Boost_INCLUDE_DIRS : ${Boost_INCLUDE_DIRS}")
    SET(Boost_LIBRARY_DIRS ${PROJECT_THIRDPARTY_PATH}/boost/${BOOST_VERSION}/lib/${MACHINE}/debug/shared)
    MESSAGE(STATUS "Boost_LIBRARY_DIRS : ${Boost_LIBRARY_DIRS}")
    #SET(Boost_FOUND TRUE)

    #Inclusion de XERCES
    INCLUDE_DIRECTORIES(${PROJECT_THIRDPARTY_PATH}/xml/xerces/c++/${XERCES_VERSION}/${MACHINE}/include)
    LINK_DIRECTORIES(${PROJECT_THIRDPARTY_PATH}/xml/xerces/c++/${XERCES_VERSION}/${MACHINE}/lib)

    #Inclusion de CPPUNIT
    INCLUDE_DIRECTORIES(${PROJECT_THIRDPARTY_PATH}/cppunit/${CPPUNIT_VERSION}/include)
    LINK_DIRECTORIES(${PROJECT_THIRDPARTY_PATH}/cppunit/${CPPUNIT_VERSION}/lib/${MACHINE}/gcc/debug/shared)

    #Inclusion de LIBXML2
    #INCLUDE_DIRECTORIES(${PROJECT_THIRDPARTY_PATH_LOCAL}/libxml2/${XML2_VERSION}/winnt/include)
    #LINK_DIRECTORIES(${PROJECT_THIRDPARTY_PATH_LOCAL}/libxml2/${XML2_VERSION}/winnt/lib)

    #INCLUDE_DIRECTORIES(${PROJECT_THIRDPARTY_PATH_LOCAL}/database/sybase/openclient/${SYBASE_SERVER_VERSION}/ESD_${SYBASE_ESD_VERSION}/${MACHINE}/include)

  ENDIF(CMAKE_HOST_SYSTEM_NAME MATCHES "SunOS")

ELSE(UNIX)
  MESSAGE(STATUS "UNIX not found")
ENDIF(UNIX)

  #Inclusion de ENVIRONNEMENT
  LINK_DIRECTORIES(${LIBRARY_OUTPUT_PATH})

  #Inclusion de TIBCO
  INCLUDE_DIRECTORIES(${PROJECT_THIRDPARTY_PATH_LOCAL}/tibco/tibrv/${TIBCO_VERSION}/${MACHINE}/include)
  LINK_DIRECTORIES(${PROJECT_THIRDPARTY_PATH_LOCAL}/tibco/tibrv/${TIBCO_VERSION}/${MACHINE}/lib)

IF(CYGWIN)

  SET(BASECORBA ${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/lib/libACE.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/lib/libTAO.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/lib/libTAO_AnyTypeCode.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/lib/libTAO_BiDirGIOP.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/lib/libTAO_DynamicAny.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/lib/libTAO_DynamicInterface.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/lib/libTAO_IDL_BE.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/lib/libTAO_IDL_FE.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/lib/libTAO_IFR_Client.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/lib/libTAO_IORManip.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/lib/libTAO_IORTable.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/lib/libTAO_Messaging.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/lib/libTAO_PortableServer.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/lib/libTAO_RTCORBA.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/lib/libTAO_RTPortableServer.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/lib/libTAO_SmartProxies.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/lib/libTAO_Strategies.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/lib/libTAO_TypeCodeFactory.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/lib/libTAO_Utils.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/lib/libTAO_CosNaming.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/lib/libTAO_CosNaming_Serv.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/lib/libTAO_CosNaming_Skel.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/lib/libTAO_Codeset.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/lib/libACE_ETCL.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/lib/libACE_ETCL_Parser.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/lib/libACE_Monitor_Control.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/lib/libTAO_AV.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/lib/libTAO_CodecFactory.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/lib/libTAO_Compression.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/lib/libTAO_CosConcurrency.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/lib/libTAO_CosConcurrency_Serv.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/lib/libTAO_CosConcurrency_Skel.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/lib/libTAO_CosEvent.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/lib/libTAO_CosEvent_Serv.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/lib/libTAO_CosEvent_Skel.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/lib/libTAO_CosLifeCycle.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/lib/libTAO_CosLifeCycle_Skel.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/lib/libTAO_CosLoadBalancing.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/lib/libTAO_CosNotification.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/lib/libTAO_CosNotification_MC.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/lib/libTAO_CosNotification_MC_Ext.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/lib/libTAO_CosNotification_Serv.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/lib/libTAO_CosNotification_Skel.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/lib/libTAO_CosProperty.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/lib/libTAO_CosProperty_Serv.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/lib/libTAO_CosProperty_Skel.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/lib/libTAO_CosTime.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/lib/libTAO_CosTime_Serv.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/lib/libTAO_CosTime_Skel.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/lib/libTAO_CosTrading.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/lib/libTAO_CosTrading_Serv.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/lib/libTAO_CosTrading_Skel.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/lib/libTAO_CSD_Framework.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/lib/libTAO_CSD_ThreadPool.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/lib/libTAO_DiffServPolicy.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/lib/libTAO_DsEventLogAdmin.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/lib/libTAO_DsEventLogAdmin_Serv.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/lib/libTAO_DsEventLogAdmin_Skel.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/lib/libTAO_DsLogAdmin.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/lib/libTAO_DsLogAdmin_Serv.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/lib/libTAO_DsLogAdmin_Skel.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/lib/libTAO_DsNotifyLogAdmin.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/lib/libTAO_DsNotifyLogAdmin_Serv.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/lib/libTAO_DsNotifyLogAdmin_Skel.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/lib/libTAO_EndpointPolicy.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/lib/libTAO_ETCL.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/lib/libTAO_FaultTolerance.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/lib/libTAO_FT_ClientORB.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/lib/libTAO_FT_ServerORB.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/lib/libTAO_FTORB_Utils.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/lib/libTAO_FTRT_ClientORB.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/lib/libTAO_FTRT_EventChannel.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/lib/libTAO_FtRtEvent.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/lib/libTAO_IFR_BE.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/lib/libTAO_IFRService.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/lib/libTAO_ImR_Activator_IDL.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/lib/libTAO_ImR_Client.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/lib/libTAO_ImR_Locator_IDL.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/lib/libTAO_IORInterceptor.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/lib/libTAO_Monitor.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/lib/libTAO_Notify_Service.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/lib/libTAO_ObjRefTemplate.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/lib/libTAO_PI.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/lib/libTAO_PI_Server.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/lib/libTAO_PortableGroup.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/lib/libTAO_ReplicationManagerLib.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/lib/libTAO_RT_Notification.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/lib/libTAO_RTCORBA.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/lib/libTAO_RTCORBAEvent.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/lib/libTAO_RTEvent.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/lib/libTAO_RTEvent_Serv.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/lib/libTAO_RTEvent_Skel.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/lib/libTAO_RTEventLogAdmin.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/lib/libTAO_RTEventLogAdmin_Serv.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/lib/libTAO_RTEventLogAdmin_Skel.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/lib/libTAO_RTSched.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/lib/libTAO_RTSchedEvent.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/lib/libTAO_RTScheduler.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/lib/libTAO_Security.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/lib/libTAO_Svc_Utils.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/lib/libTAO_TC.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/lib/libTAO_TC_IIOP.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/lib/libTAO_TypeCodeFactory.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/lib/libTAO_Utils.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/lib/libTAO_Valuetype.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/lib/libTAO_ZIOP.dll)

                #${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/lib/libUTF16_UCS2.dll
                #${PROJECT_THIRDPARTY_PATH_LOCAL}/tao/ACE_wrappers/lib/libDynServer.dll

ELSE(CYGWIN)

  SET(BASECORBA ACE ACE_RMCast TAO TAO_BiDirGIOP TAO_DynamicAny TAO_DynamicInterface TAO_IDL_BE TAO_IDL_FE TAO_IFR_Client TAO_IORManip TAO_IORTable TAO_Messaging TAO_PortableServer TAO_RTCORBA TAO_RTPortableServer TAO_SmartProxies TAO_Strategies TAO_TypeCodeFactory TAO_Utils TAO_CosNaming TAO_Codeset)

ENDIF(CYGWIN)

#MESSAGE(STATUS "BASECORBA : ${BASECORBA}")

IF(CYGWIN)

  SET(BASETIBCO ${PROJECT_THIRDPARTY_PATH_LOCAL}/tibco/tibrv/${TIBCO_VERSION}/${MACHINE}/bin/libeay32.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tibco/tibrv/${TIBCO_VERSION}/${MACHINE}/bin/ssleay32.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tibco/tibrv/${TIBCO_VERSION}/${MACHINE}/bin/tibrv.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tibco/tibrv/${TIBCO_VERSION}/${MACHINE}/bin/tibrvcm.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tibco/tibrv/${TIBCO_VERSION}/${MACHINE}/bin/tibrvcmq.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tibco/tibrv/${TIBCO_VERSION}/${MACHINE}/bin/tibrvcom.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tibco/tibrv/${TIBCO_VERSION}/${MACHINE}/bin/tibrvft.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tibco/tibrv/${TIBCO_VERSION}/${MACHINE}/bin/tibrvj.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tibco/tibrv/${TIBCO_VERSION}/${MACHINE}/bin/tibrvjsd.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tibco/tibrv/${TIBCO_VERSION}/${MACHINE}/bin/tibrvsd.dll
                ${PROJECT_THIRDPARTY_PATH_LOCAL}/tibco/tibrv/${TIBCO_VERSION}/${MACHINE}/bin/tibrvsdcom.dll)

ELSE(CYGWIN)

  SET(BASETIBCO tibrv tibrvcm tibrvcmq tibrvft)

ENDIF(CYGWIN)

IF(CYGWIN)

  SET(BASELIBXML2 ${PROJECT_THIRDPARTY_PATH_LOCAL}/libxml2/${XML2_VERSION}/winnt/lib/libxml2.dll
                  ${PROJECT_THIRDPARTY_PATH_LOCAL}/libxml2/${XML2_VERSION}/winnt/lib/libiconv2.dll)

  SET(BASELIBXML2 ${LIBXML_LIBRARY_DIRS})

ELSE(CYGWIN)

  SET(BASELIBXML2 xml2)

ENDIF(CYGWIN)

IF(CYGWIN)

  SET(BASESYBASE ${PROJECT_THIRDPARTY_PATH_LOCAL}/database/sybase/openclient/${SYBASE_SERVER_VERSION}/ESD_${SYBASE_ESD_VERSION}/${MACHINE}/dll/debug/libct.dll
                 ${PROJECT_THIRDPARTY_PATH_LOCAL}/database/sybase/openclient/${SYBASE_SERVER_VERSION}/ESD_${SYBASE_ESD_VERSION}/${MACHINE}/dll/debug/libcobct.dll
                 ${PROJECT_THIRDPARTY_PATH_LOCAL}/database/sybase/openclient/${SYBASE_SERVER_VERSION}/ESD_${SYBASE_ESD_VERSION}/${MACHINE}/dll/debug/libcs.dll
                 ${PROJECT_THIRDPARTY_PATH_LOCAL}/database/sybase/openclient/${SYBASE_SERVER_VERSION}/ESD_${SYBASE_ESD_VERSION}/${MACHINE}/dll/debug/libsybdb.dll
                 ${PROJECT_THIRDPARTY_PATH_LOCAL}/database/sybase/openclient/${SYBASE_SERVER_VERSION}/ESD_${SYBASE_ESD_VERSION}/${MACHINE}/dll/debug/libxadtm.dll
                 ${PROJECT_THIRDPARTY_PATH_LOCAL}/database/sybase/openclient/${SYBASE_SERVER_VERSION}/ESD_${SYBASE_ESD_VERSION}/${MACHINE}/dll/debug/libblk.dll)

ELSE(CYGWIN)

  SET(BASESYBASE ct
                 cobct
                 cs
                 sybdb
                 xadtm
                 blk)

ENDIF(CYGWIN)

IF(CYGWIN)

  SET(BASEORACLE ${ORACLE_HOME}/app/oracle/product/${ORACLE_VERSION}/server/BIN/oci.dll
                 ${ORACLE_HOME}/app/oracle/product/${ORACLE_VERSION}/server/BIN/ociw32.dll)

ELSE(CYGWIN)

  SET(BASEORACLE oci
                 ociw32)

ENDIF(CYGWIN)

  SET(BASEXERCES xerces-c)

OPTION(WITH_GUI "Compil graphic unser interface" ON)

IF(WITH_GUI)
  MESSAGE(STATUS "Graphic user interface compilation activated")
  FIND_PACKAGE(X11)

  IF(X11_FOUND)
    MESSAGE(STATUS "X11 available")
    INCLUDE_DIRECTORIES(${X11_INCLUDE_DIR})
  ELSE(X11_FOUND)
    MESSAGE(STATUS "X11 not found")
  ENDIF(X11_FOUND)

  #FIND_PACKAGE(Qt3)

  #IF(Qt3_FOUND)
  #  MESSAGE(STATUS "Qt3 available")
  #  INCLUDE(${QT_USE_FILE})
  #  INCLUDE_DIRECTORIES(${QT_INCLUDES})
  #ELSE(Qt3_FOUND)
  #  MESSAGE(STATUS "Qt3 not found")
  #ENDIF(Qt3_FOUND)

ENDIF(WITH_GUI)

#FIND_PACKAGE(ZLIB REQUIRED)
FIND_PACKAGE(ZLIB)

IF(ZLIB_FOUND)
  MESSAGE(STATUS "ZLIB available")
  INCLUDE_DIRECTORIES(${ZLIB_INCLUDE_DIR})
  #LINK_DIRECTORIES(${ZLIB_LIBRARY_DIRS})
ELSE(ZLIB_FOUND)
  MESSAGE(STATUS "ZLIB not found")
ENDIF(ZLIB_FOUND)

FIND_PACKAGE(
    Boost
    1.67.0
    COMPONENTS date_time filesystem system
#   REQUIRED signals
)

if(WITH_BOOST)
  LIST(APPEND COMPILE_FLAGS -DWITH_BOOST)
  #FIND_PACKAGE(Boost COMPONENTS filesystem system REQUIRED)
  FIND_PACKAGE(Boost REQUIRED)
  SET(FILESYSTEM_LIBS ${Boost_LIBRARIES})
else()
  if(NOT WIN32)
    SET(FILESYSTEM_LIBS stdc++fs)
  endif()
endif()

#ADD_DEFINITIONS("-pthread")

IF(Boost_FOUND)
  MESSAGE(STATUS "Boost available")
  SET(Boost_USE_STATIC_LIBS OFF)
  SET(Boost_USE_MULTITHREAD ON)
  #SET(Boost_LIBRARIES boost_thread)

  MESSAGE(STATUS "${Boost_LIBRARIES}")

  INCLUDE_DIRECTORIES(${Boost_INCLUDE_DIRS})
  LINK_DIRECTORIES(${Boost_LIBRARY_DIRS})
ELSE(Boost_FOUND)
  MESSAGE(STATUS "Boost not found")

ENDIF(Boost_FOUND)

#FIND_PACKAGE(LibXml2 REQUIRED)
#FIND_PACKAGE(LibXml2)

IF(LIBXML2_FOUND)
  MESSAGE(STATUS "LIBXML2 available")
  INCLUDE_DIRECTORIES(${LIBXML2_INCLUDE_DIR})
  LINK_DIRECTORIES(${LIBXML2_LIBRARY_DIRS})
ELSE(LIBXML2_FOUND)
  MESSAGE(STATUS "LIBXML2 not found")
ENDIF(LIBXML2_FOUND)

OPTION( ENABLE_CORBA "Enable CORBA" ON)

INCLUDE(${PROJECT_CONFIG_DIR}/FindTAO.cmake)

IF(FOUND_TAO)
  MESSAGE(STATUS "TAO available")
  MESSAGE(STATUS " dans ${TAO_DIR} et ${ACE_DIR}")

  ADD_DEFINITIONS(${CORBA_CFLAGS} -DuseTao -D_TEMPLATES_ENABLE_ -D_REENTRANT)
ELSE(FOUND_TAO)
  MESSAGE(STATUS "TAO not found")
ENDIF(FOUND_TAO)

IF (MINGW)
  MESSAGE(STATUS "JNI not searched")
ELSE(MINGW)
  #INCLUDE(FindJNI)
  #MESSAGE(STATUS " JAVA dans ${JAVA_JVM_LIBRARY_DIR} et ${JNI_INCLUDE_DIRS}")

  #INCLUDE_DIRECTORIES(${JNI_INCLUDE_DIRS})
  #INCLUDE_DIRECTORIES(${JAVA_INCLUDE_PATH})

  #LINK_DIRECTORIES(${JNI_LIBRARIES})
ENDIF(MINGW)

#SET(EXCLUDE Unittest)
#SET(EXCLUDE_PATTERNS */*Unittest*/* )

INCLUDE(${PROJECT_CONFIG_DIR}/ProjectDoc.cmake)

INCLUDE(CTest)
INCLUDE(${PROJECT_CONFIG_DIR}/CTestConfig.cmake)

# C++11
MACRO(use_cxx11)
  IF (CMAKE_VERSION VERSION_LESS "3.1")
    IF (CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
      SET (CMAKE_CXX_FLAGS "--std=gnu++11 ${CMAKE_CXX_FLAGS}")
    ENDIF ()
  ELSE ()
    SET (CMAKE_CXX_STANDARD 11)
  ENDIF ()
ENDMACRO(use_cxx11)

#target valgrind
ADD_CUSTOM_TARGET(valgrind
COMMAND valgrind --leak-check=full run_tests
)

#target cov produce report : coverage.html
ADD_CUSTOM_TARGET(cov
# Run tests
COMMAND run_tests
# Run gcovr
COMMAND gcovr -r ${CMAKE_CURRENT_SOURCE_DIR} --html -o coverage.html --html-details
WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
COMMENT "Running gcovr to produce code coverage report."
)

#target sonarqube
ADD_CUSTOM_TARGET(sonarqube
WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
COMMAND /usr/local/sonar-runner/bin/sonar-scanner -Dproject.settings=${PROJECT_SOURCE_DIR}/sonar-project.properties
)

#target cppcheck produce report : check/index.html
ADD_CUSTOM_TARGET(cppcheck
WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
# Code analysis
COMMAND cppcheck --enable=all --inconclusive --xml --xml-version=2 -I${CMAKE_CURRENT_SOURCE_DIR} ${CMAKE_CURRENT_SOURCE_DIR} 2> cppcheck-result.xml
# Run htmlreport
COMMAND cppcheck-htmlreport --source-dir=${CMAKE_CURRENT_SOURCE_DIR} --report-dir=check --file=cppcheck-result.xml
COMMENT "Running cppcheck to produce code analysis report."
)

#target clangtidy
ADD_CUSTOM_TARGET(clangtidy
#COMMAND clang-tidy --leak-check=full run_tests
COMMAND clang-tidy --checks='*' --header-filter=*^include* -p . ${CMAKE_CURRENT_SOURCE_DIR}/src/main/**/*.cpp ${CMAKE_CURRENT_SOURCE_DIR}/src/main/**/include/*.h > clang-tidy-report.txt
)


# target etags/tags
#ADD_CUSTOM_TARGET(tags etags --members --declarations  `find ${CMAKE_CURRENT_SOURCE_DIR} -name *.cxx -or -name *.h`)
#ADD_CUSTOM_TARGET(etags DEPENDS tags)

#For test --no-compress-output -T Test
ENABLE_TESTING(true)

SET(CTEST_BINARY_DIRECTORY "${CMAKE_INSTALL_PREFIX}/bin")
#SET(CTEST_SOURCE_DIRECTORY "${CMAKE_SOURCE_DIR}/src/test/cpp")
##SET(CTEST_SOURCE_DIRECTORY "${PROJECT_SOURCE_DIR}/src/test/cpp")
## valgrind
#FIND_PROGRAM(CTEST_MEMORYCHECK_COMMAND NAMES valgrind)
#use ctest -T memcheck
INCLUDE(Dart)
#CONFIGURE_FILE(${PROJECT_BINARY_DIR}/DartConfiguration.tcl ${CMAKE_BINARY_DIR}/src/DartConfiguration.tcl)
#CONFIGURE_FILE("${PROJECT_BINARY_DIR}/DartConfiguration.tcl" "${CMAKE_BINARY_DIR}/DartConfiguration.tcl" )

SET(PROCESSOR_COUNT "2")

IF(CMAKE_COMPILER_IS_GNUCXX)
  #https://github.com/bilke/cmake-modules/blob/master/CodeCoverage.cmake
  INCLUDE(${PROJECT_CONFIG_DIR}/CodeCoverage.cmake)
  APPEND_COVERAGE_COMPILER_FLAGS()
  #SETUP_TARGET_FOR_COVERAGE_LCOV(${PROJECT_NAME}_coverage test coverage)
  SETUP_TARGET_FOR_COVERAGE_GCOVR_XML(
	NAME coverage
	EXECUTABLE ctest -j ${PROCESSOR_COUNT}
	DEPENDENCIES run_app
	BASE_DIRECTORY "${CMAKE_SOURCE_DIR}/")
  #SETUP_TARGET_FOR_COVERAGE_GCOVR_HTML(
  #    NAME coverage
  #    EXECUTABLE ctest -j ${PROCESSOR_COUNT}
  #    DEPENDENCIES run_app
  #    BASE_DIRECTORY "${CMAKE_SOURCE_DIR}/")
ENDIF()

#IF(CMAKE_COMPILER_IS_GNUCC)
#  SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fmessage-length=0 -g -O0 -Wall -W -fprofile-arcs -ftest-coverage")
#ENDIF(CMAKE_COMPILER_IS_GNUCC)
#IF(CMAKE_COMPILER_IS_GNUCXX AND NOT BUILD_SHARED_LIBS)
#  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fprofile-arcs -ftest-coverage")
#  #SET(CMAKE_SHARED_LINKER_FLAGS "-fprofile-arcs -ftest-coverage")
#  SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -fprofile-arcs -ftest-coverage")
#ENDIF(CMAKE_COMPILER_IS_GNUCXX AND NOT BUILD_SHARED_LIBS)

INCLUDE(InstallRequiredSystemLibraries)

# Default package format to use when building a package with CPack
if(APPLE)
  SET(DEFAULT_CPACK_GENERATOR "DragNDrop")
elseif(UNIX)
  SET(DEFAULT_CPACK_GENERATOR "DEB")
elseif(WIN32)
  SET(DEFAULT_CPACK_GENERATOR "NSIS")
endif()
SET(CPACK_GENERATOR "${DEFAULT_CPACK_GENERATOR}" CACHE STRING "Package type to generate with CPack")
SET(CPACK_DEBIAN_PACKAGE_MAINTAINER "Alban Andrieu") #required

SET(CPACK_PACKAGE_NAME "MICROSOFT")
SET(CPACK_PACKAGE_VENDOR "Nabla International")
SET(CPACK_PACKAGE_CONTACT "${CPACK_PACKAGE_VENDOR}")
SET(CPACK_DEBIAN_PACKAGE_DEBUG ON)
SET(CPACK_DEB_COMPONENT_INSTALL ON)
SET(CPACK_DEBIAN_PACKAGE_GENERATE_SHLIBS ON)
# autogenerate dependency information
#Do not enable when it is not default CMAKE_INSTALL_PREFIX
SET(CPACK_DEBIAN_PACKAGE_SHLIBDEPS ON)
#SET(CPACK_PACKAGING_INSTALL_PREFIX "/usr") # root directory for packaging
SET(CPACK_PACKAGING_INSTALL_PREFIX ":${CMAKE_INSTALL_PREFIX}")

SET(CPACK_PACKAGE_DESCRIPTION "short description")
SET(CPACK_PACKAGE_DESCRIPTION_SUMMARY "Tool is a sample reference
 Tool is an helper to create defoult C++ code.
 .
 The dependency information is output as .dot files, which can be visualized
 in, for example, GraphViz.")
SET(CPACK_DEBIAN_PACKAGE_HOMEPAGE https://github.com/AlbanAndrieu/nabla-cpp)
SET(CPACK_DEBIAN_PACKAGE_SUGGESTS graphviz)
SET(CPACK_DEBIAN_PACKAGE_SECTION devel)

SET(CPACK_PACKAGE_VERSION ${PROJECT_VERSION})
SET(CPACK_PACKAGE_VERSION_MAJOR ${PROJECT_MAJOR_VERSION})
SET(CPACK_PACKAGE_VERSION_MINOR ${PROJECT_MINOR_VERSION})
SET(CPACK_PACKAGE_VERSION_PATCH ${PROJECT_PATH_VERSION})
MESSAGE("CPACK_PACKAGE_VERSION is defined to : ${CPACK_PACKAGE_VERSION}")
SET(CPACK_PACKAGE_FILE_NAME "${CMAKE_PROJECT_NAME}_${MAJOR_VERSION}.${MINOR_VERSION}.${CPACK_PACKAGE_VERSION_PATCH}")
SET(CPACK_SOURCE_PACKAGE_FILE_NAME "${CMAKE_PROJECT_NAME}_${MAJOR_VERSION}.${MINOR_VERSION}.${CPACK_PACKAGE_VERSION_PATCH}")

SET(CPACK_DEBIAN_PACKAGE_DEPENDS "libc6 (>= 2.3.1-6), libgcc1 (>= 1:3.4.2-12), libstdc++6 (>= 4.2.1)")

SET(CPACK_DEBIAN_PACKAGE_PRIORITY "optional")
SET(CPACK_DEBIAN_PACKAGE_SECTION "ubuntu")
SET(CPACK_DEBIAN_ARCHITECTURE ${CMAKE_SYSTEM_PROCESSOR})

# Automatically detect package version to use from git
FIND_PACKAGE(Git)
if(Git_FOUND OR GIT_FOUND)
  execute_process(
    COMMAND ${GIT_EXECUTABLE} describe --tags --long --dirty --always
    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
    RESULT_VARIABLE DESCRIBE_RESULT
    OUTPUT_VARIABLE DESCRIBE_STDOUT
    )
  if(DESCRIBE_RESULT EQUAL 0)
    string(STRIP "${DESCRIBE_STDOUT}" DESCRIBE_STDOUT)
    MESSAGE(STATUS "Git reported this project's version as '${DESCRIBE_STDOUT}'")
    if(DESCRIBE_STDOUT MATCHES "^(.*)-(dirty)$")
      set(DESCRIBE_DIRTY "${CMAKE_MATCH_2}")
      set(DESCRIBE_STDOUT "${CMAKE_MATCH_1}")
    endif()
    if(DESCRIBE_STDOUT MATCHES "^([0-9a-f]+)$")
      set(DESCRIBE_COMMIT_NAME "${CMAKE_MATCH_1}")
      set(DESCRIBE_STDOUT "")
    elseif(DESCRIBE_STDOUT MATCHES "^(.*)-g([0-9a-f]+)$")
      set(DESCRIBE_COMMIT_NAME "${CMAKE_MATCH_2}")
      set(DESCRIBE_STDOUT "${CMAKE_MATCH_1}")
    endif()
    if(DESCRIBE_STDOUT MATCHES "^(.*)-([0-9]+)$")
      set(DESCRIBE_COMMIT_COUNT "${CMAKE_MATCH_2}")
      set(DESCRIBE_TAG "${CMAKE_MATCH_1}")
      set(DESCRIBE_STDOUT "")
    endif()
    if("${DESCRIBE_TAG}.0.0" MATCHES "^([0-9]+)\\.([0-9]+)\\.([0-9]+).*$")
      set(CPACK_PACKAGE_VERSION_MAJOR "${CMAKE_MATCH_1}")
      set(CPACK_PACKAGE_VERSION_MINOR "${CMAKE_MATCH_2}")
      set(CPACK_PACKAGE_VERSION_PATCH "${CMAKE_MATCH_3}")
    endif()
    if(DESCRIBE_COMMIT_COUNT GREATER 0)
      # Make it a pre-release version of the next patch release
      math(EXPR CPACK_PACKAGE_VERSION_PATCH "${CPACK_PACKAGE_VERSION_PATCH} + 1")
    endif()

    set(CPACK_PACKAGE_VERSION "${CPACK_PACKAGE_VERSION_MAJOR}.${CPACK_PACKAGE_VERSION_MINOR}.${CPACK_PACKAGE_VERSION_PATCH}")
    set(CPACK_DEBIAN_PACKAGE_VERSION "${CPACK_PACKAGE_VERSION}")

    # Now for the rest: format global CPack version according to semver.org, Debian so that it'll get proper sorting for dpkg
    if(DESCRIBE_COMMIT_COUNT GREATER 0)
      set(CPACK_PACKAGE_VERSION "${CPACK_PACKAGE_VERSION}-${DESCRIBE_COMMIT_COUNT}")
      set(CPACK_DEBIAN_PACKAGE_VERSION "${CPACK_DEBIAN_PACKAGE_VERSION}~${DESCRIBE_COMMIT_COUNT}")
    endif()

    set(CPACK_PACKAGE_VERSION "${CPACK_PACKAGE_VERSION}+g${DESCRIBE_COMMIT_NAME}")
    set(CPACK_DEBIAN_PACKAGE_VERSION "${CPACK_DEBIAN_PACKAGE_VERSION}+g${DESCRIBE_COMMIT_NAME}")

    if(DESCRIBE_DIRTY)
      string(TIMESTAMP DESCRIBE_DIRTY_TIMESTAMP "%Y%m%d%H%M%S" UTC)
      set(CPACK_PACKAGE_VERSION "${CPACK_PACKAGE_VERSION}.dirty.${DESCRIBE_DIRTY_TIMESTAMP}")
      set(CPACK_DEBIAN_PACKAGE_VERSION "${CPACK_DEBIAN_PACKAGE_VERSION}+dirty${DESCRIBE_DIRTY_TIMESTAMP}")
    endif()
  else()
    message(WARNING "Git failed to report the version")
  endif()
  MESSAGE("CPACK_PACKAGE_VERSION is defined to : ${CPACK_PACKAGE_VERSION}")
  else()
  MESSAGE(STATUS "GIT not found")
endif()

if(CPACK_GENERATOR STREQUAL DEB)
  find_program(DPKG_CMD dpkg REQUIRED)
  if(NOT DPKG_CMD)
    message(STATUS "Can not find dpkg in your path, default to i386.")
    set(CPACK_DEBIAN_PACKAGE_ARCHITECTURE i386)
  else()
    execute_process(COMMAND "${DPKG_CMD}" --print-architecture
      OUTPUT_VARIABLE CPACK_DEBIAN_PACKAGE_ARCHITECTURE
      OUTPUT_STRIP_TRAILING_WHITESPACE
      )
  endif()

  if(NOT DEFINED CPACK_DEBIAN_PACKAGE_VERSION)
    set(CPACK_DEBIAN_PACKAGE_VERSION "${CPACK_PACKAGE_VERSION_MAJOR}.${CPACK_PACKAGE_VERSION_MINOR}.${CPACK_PACKAGE_VERSION_PATCH}")
  endif()

  # Because the default package name produced by CPack fails to meet Debian packaging conventions
  set(CPACK_PACKAGE_FILE_NAME "${CPACK_PACKAGE_NAME}_${CPACK_DEBIAN_PACKAGE_VERSION}_${CPACK_DEBIAN_PACKAGE_ARCHITECTURE}")
endif()

IF(WIN32 AND NOT UNIX)
  SET(CPACK_NSIS_MODIFY_PATH ON)
ELSE(WIN32 AND NOT UNIX)
  SET(CPACK_STRIP_FILES "")
  SET(CPACK_SOURCE_STRIP_FILES "")
ENDIF(WIN32 AND NOT UNIX)
#SET(CPACK_PACKAGE_EXECUTABLES "Tools" "Tools")

INCLUDE(CPack)
